#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -*- mode: python -*-
# (c) Copyright 2014 WibiData, Inc.
"""Support script for the bento-cluster.

Edits a user's hosts file. This script is separate from the rest of bento-cluster so that it can be
invoked as root. This script should also be written such that it is as compatible as possible with
old versions of python as the python that the root account has access to may be much older than
the user's python.
"""
import io
import os
import re
import sys


def _update_hosts(first, second, hosts_file_path=None):
    """Updates a hosts file to include an entry for this bento instance.

    Args:
        first: The first token of the entry to add to the hosts file.
        second: The second token of the entry to add to the hosts file.
        hosts_file_path: Path to the hosts file to update. Defaults to the the contents of the
            HOSTALIASES environment variable on linux systems and '/etc/hosts' for others.
    """
    if not os.path.exists(hosts_file_path):
        original_hosts = ''
    else:
        with io.open(hosts_file_path, 'rt', encoding='utf-8') as hosts_file:
            original_hosts = hosts_file.read()

    # Write the hosts file to a backup file.
    with io.open('%s.backup' % hosts_file_path, 'wt', encoding='utf-8') as backup_file:
        backup_file.write(original_hosts)

    # Replace lines.
    first_line_pattern = re.compile('^\s*%s\s+' % first)
    second_line_pattern = re.compile('\s*[A-Za-z0-9-_]+\s+%s\s*$' % second)
    filtered_hosts = [
        line
        for line in original_hosts.splitlines()
        if re.match(first_line_pattern, line) is None
        and re.match(second_line_pattern, line) is None
    ]
    filtered_hosts.append('%s %s' % (first, second))

    # Write new hosts file.
    with io.open(hosts_file_path, 'wt', encoding='utf-8') as hosts_file:
        hosts_file.write(os.linesep.join(filtered_hosts) + os.linesep)


def main(args):
    """
    Program entry point.

    CLI Args:
        args[0]: First token of the hosts file entry to add. Must be provided.
        args[1]: Second token of the hosts file entry to add. Must be provided.
        args[2]: Path to the hosts file to add to. Must be provided.
    Args:
        args: Command line arguments.
    """
    assert len(args) == 3, 'Expected 3 arguments, but received: %r' % args

    _update_hosts(
        first=args[0],
        second=args[1],
        hosts_file_path=args[2],
    )


if __name__ == '__main__':
    # Remove the first argument.
    main(sys.argv[1:])
